deployments:
  gateway:
    image: gateway:local
    volumeMounts:
      /etc/gateway:
        configMap: gateway-conf
  storage:
    image: storage:local
    envSecret: storage-sec-env
    volumeMounts:
      /etc/storage:
        configMap: storage-conf
  analysis:
    image: analysis:local
    envSecret: analysis-sec-env
    volumeMounts:
      /etc/analysis:
        configMap: analysis-conf
  minio:
    image: quay.io/minio/minio:latest
    args: ["server", "/data", "--console-address", ":9001"]
    envSecret: minio-sec-env
    volumeMounts:
      /data:
        readOnly: false

pg:
  storage-pg:
    instances: 1
    database: storage
    owner: storage
    secret: storage-pg-sec
  analysis-pg:
    instances: 1
    database: analysis
    owner: analysis
    secret: analysis-pg-sec

services:
  gateway:
    selector:
      app: gateway
    ports:
      - name: http
        port: 80
        targetPort: 80
        protocol: TCP
    type: LoadBalancer
  storage:
    selector:
      app: storage
    ports:
      - name: http
        port: 8080
        targetPort: 8080
        protocol: TCP
  analysis:
    selector:
      app: analysis
    ports:
      - name: http
        port: 8080
        targetPort: 8080
        protocol: TCP
  minio:
    selector:
      app: minio
    ports:
      - name: api
        port: 9000
        targetPort: 9000
      - name: console
        port: 9001
        targetPort: 9001
    type: LoadBalancer

jobs:
  storage-pg-migrate:
    template:
      spec:
        containers:
          - name: migrate
            image: storage-pg-migrate:local
            command: ["flyway", "migrate"]
            envFrom:
              - secretRef:
                  name: storage-migrate-sec-env
        initContainers:
          - name: wait-pg
            image: postgres:latest
            command: &wait-pg-command
              - sh
              - -c
              - |
                wait() {
                    echo "Waiting for PostgreSQL readiness..."
                    timeout 300 sh -c "
                        until pg_isready -d $PG_CONNECTION_STRING ; do
                            sleep 1
                        done
                        echo \"PostgreSQL is ready!\"
                    "
                }
                if ! wait; then
                    echo "Timeout reached while attempting to connect PostgreSQL"
                    exit 1
                fi
            envFrom:
              - secretRef:
                  name: storage-wait-pg-sec-env
        restartPolicy: Never
  analysis-pg-migrate:
    template:
      spec:
        containers:
          - name: migrate
            image: analysis-pg-migrate:local
            command: ["flyway", "migrate"]
            envFrom:
              - secretRef:
                  name: analysis-migrate-sec-env
        initContainers:
          - name: wait-pg
            image: postgres:latest
            command: *wait-pg-command
            envFrom:
              - secretRef:
                  name: analysis-wait-pg-sec-env
        restartPolicy: Never
  minio-init:
    template:
      spec:
        containers:
          - name: init
            image: minio/mc
            command:
              - bash
              - -c
              - |
                mc alias set myminio http://minio:9000 $MINIO_ROOT_USER $MINIO_ROOT_PASSWORD
                mc mb myminio/storage
                mc anonymous set download myminio/storage
                mc mb myminio/image
                mc anonymous set download myminio/image
                mc admin accesskey create myminio --access-key $ACCESS_KEY_ID --secret-key $SECRET_ACCESS_KEY
            envFrom:
              - secretRef:
                  name: minio-init-sec-env
        restartPolicy: Never

configMaps:
  gateway-conf:
    data:
      config.yaml: |
        locations:
          /storage/:
            url: http://storage:8080/
          /analysis/:
            url: http://analysis:8080/
  storage-conf:
    data:
      config.yaml: |
        s3:
          region: ru
          endpoint_url: http://minio:9000
          bucket: storage
          url_prefix: http://localhost:9000/storage/
  analysis-conf:
    data:
      config.yaml: |
        s3:
          region: ru
          endpoint_url: http://minio:9000
          file_bucket: storage
          image_bucket: image
          image_url_prefix: http://localhost:9000/image/
        storage_url: http://storage:8080

localSecrets:
  storage-sec-env:
    PG_CONN_STRING: postgres://storage:secret@storage-pg-rw:5432/storage?sslmode=disable
    ACCESS_KEY_ID: storage
    SECRET_ACCESS_KEY: storage-secret-access-key
  storage-pg-sec:
    username: storage
    password: secret
  storage-migrate-sec-env:
    FLYWAY_URL: jdbc:postgresql://storage-pg-rw:5432/storage
    FLYWAY_USER: storage
    FLYWAY_PASSWORD: secret
    FLYWAY_LOCATIONS: filesystem:/app/migrations
    FLYWAY_VALIDATE_MIGRATION_NAMING: "true"
    FLYWAY_BASELINE_ON_MIGRATE: "true"
  storage-wait-pg-sec-env:
    PG_CONNECTION_STRING: postgres://storage:secret@storage-pg-rw:5432/storage?sslmode=disable
  minio-sec-env:
    MINIO_ROOT_USER: admin
    MINIO_ROOT_PASSWORD: admin123
  minio-init-sec-env:
    MINIO_ROOT_USER: admin
    MINIO_ROOT_PASSWORD: admin123
    ACCESS_KEY_ID: storage
    SECRET_ACCESS_KEY: storage-secret-access-key
  analysis-sec-env:
    PG_CONN_STRING: postgres://analysis:secret@analysis-pg-rw:5432/analysis?sslmode=disable
    ACCESS_KEY_ID: storage
    SECRET_ACCESS_KEY: storage-secret-access-key
  analysis-pg-sec:
    username: analysis
    password: secret
  analysis-migrate-sec-env:
    FLYWAY_URL: jdbc:postgresql://analysis-pg-rw:5432/analysis
    FLYWAY_USER: analysis
    FLYWAY_PASSWORD: secret
    FLYWAY_LOCATIONS: filesystem:/app/migrations
    FLYWAY_VALIDATE_MIGRATION_NAMING: "true"
    FLYWAY_BASELINE_ON_MIGRATE: "true"
  analysis-wait-pg-sec-env:
    PG_CONNECTION_STRING: postgres://analysis:secret@analysis-pg-rw:5432/analysis?sslmode=disable
